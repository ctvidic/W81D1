quit
@action_name
@controller_class.class
@controller_class
quit
      @controller_class.new(req, res, newparams)      
@action_name
quit
params.captures
params.names.zip
params.names
hash[params.names.zip(params.captures)]
params
c
params
Hash[params.names.zip(params.captures)]
@pattern.match(req.path).captures
@pattern.match(req.path).class
@pattern.match(req.path).named_captures
@pattern.match(req.path)
quit
step
params
quit
params
step
params
quit
params
res.class
res(params)
res(params
res.params
res.path
res
@pattern.match(res.path)
@pattern.match(req.path)
@patter.match
@pattern.match(req.params)
@pattern.match
@pattern.toString
@pattern.class
req.params
@pattern
@pattern.pattern
quit
c
@pattern =~ req.path
quit
req
@pattern.parse
quit
@pattern == req.path
req.path
@pattern
quit
req.request_method.downcase
@http_method.to_s
quit
req.request_method
@http_method
req.path
@pattern
c
n
@res.write(content)
@res['Content-Type'] = content_type
c
@res.write(content)
@res.wrtie(content)
@res['content-type']
@red['content-type']
c
exit
!!!
render_content(erb_temp,'text/html')
erb_temp
erb_temo
c
cc
c
quit
template
c
template
c
step
quit
template = File.read("#{template_name.to_s}.html.erb")
=> 50:       template = File.read("#{template_name.to_s}.html.erb")
c
File.read(template_name.to_s)
c
File.read(template_name)
template
quit
template
step
quit
template.class
template
step
quit
File.dirname(template_name.to_s)
File.dirname(template_name)
File.dirnam(template_name)
template_name.class
:index
template_name
